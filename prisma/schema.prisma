generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_IT_SQUARE")
}

model Project {
  id                 Int              @id @default(autoincrement())
  name               String
  attachments        Json?
  category           String?
  description        String?          @db.MediumText
  level              String?
  privacy            String?
  version            String?
  authorUserId       Int              @map("author_user_id")
  coAuthorUserIds    Json?            @map("co_author_user_ids")
  budget             Json?
  salary             Json?
  is_involved        Boolean?
  is_recruit         Boolean?
  type               String?
  status             String?
  contentStatus      String?          @map("content_status") @db.MediumText
  timeToDo           String?          @map("time_to_do")
  memberJoin         Json?            @map("member_join")
  programingLanguage Json?            @map("programing_language")
  framework          Json?
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  deleted            DateTime?
  projectMembers     ProjectMembers[]

  @@map("project")
}

model ProjectInterested {
  id        Int       @id @default(autoincrement())
  projectId Int       @map("project_id")
  userId    Int       @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deleted   DateTime?

  @@map("project_interested")
}

model ProjectMembers {
  id           Int       @id @default(autoincrement())
  memberUserId Int?      @map("member_user_id")
  projectId    Int       @map("project_id")
  position     String?
  linkTest     String?   @map("link_test")
  pmUserId     Int       @map("pm_user_id")
  salary       Json?
  fee          Json?
  status       String?
  jobDescription String? @map("job_description") @db.MediumText

  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deleted      DateTime?

  project Project @relation(fields: [projectId], references: [id])

  @@map("project_members")
}

model UserAdvance {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique @map("user_id")
  roles     Json?
  language  Json?
  skill     Json?
  info      String?   @db.MediumText
  plan      String?   @db.MediumText
  goal      String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deleted   DateTime?

  @@map("user_advance")
}

model UserFeedback {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  projectId Int       @map("project_id")
  grate     Int?
  content   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deleted   DateTime?

  @@map("user_feedback")
}

model Notification {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  userReceiveId Int       @map("user_receive_id")
  type          String?
  typeId        Int?      @map("type_id")
  content       Json?
  isRead        Boolean   @default(false) @map("is_read")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deleted       DateTime?

  @@map("notification")
}
