generator client {
  provider = "prisma-client-js"
  output   = "./generator/clientUserCore"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_USER")
}

model User {
  id                       Int    @id @default(autoincrement()) 
  first_name               String?   @db.VarChar(255)
  name                     String    @db.VarChar(255)
  platform                 String    @default("email") @db.VarChar(255)
  email                    String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at        DateTime? @db.Timestamp(0)
  access_token_social      String?   @db.Text
  social_id                String?   @db.Text
  phone_number             String?   @db.VarChar(255)
  username                 String?   @db.VarChar(255)
  password                 String?   @db.VarChar(255)
  roles                    Json?
  role_label               String?   @db.VarChar(255)
  is_flag                  Boolean?
  quotes                   String?   @db.VarChar(255)
  avatar_attachment_id     Json?
  background_attachment_id Json?
  remember_token           String?   @db.VarChar(100)
  created_at               DateTime? @db.Timestamp(0)
  updated_at               DateTime? @db.Timestamp(0)
  avatar                   String?   @db.VarChar(255)

  @@map("users")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model password_resets {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
}

model social_providers {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt
  provider    String    @db.VarChar(255)
  provider_id String    @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([provider_id], map: "social_providers_provider_id_index")
  @@index([provider], map: "social_providers_provider_index")
}

model user_avatars {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt?   @db.UnsignedBigInt
  background_file String?   @db.VarChar(255)
  face            Json?
  hair            Json?
  eyebrows        Json?
  body            Json?
  eyes            Json?
  mouth           Json?
  nose            Json?
  shirt           Json?
  trouser         Json?
  shoes           Json?
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}
